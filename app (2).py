# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18YWSDCLu3EUlKlLvvOxRsn6ft-w6mmn0
"""

from flask import Flask, request, jsonify
import torch
from PIL import Image
import io
import mysql.connector
import pathlib
from collections import OrderedDict
from pathlib import Path
pathlib.PosixPath = pathlib.WindowsPath

app = Flask(__name__)

# YOLOv5 모델 로드
try:
    model_path = Path('model/food_best.pt')
    model = torch.hub.load('ultralytics/yolov5', 'custom', path=str(model_path), force_reload=True)
except Exception as e:
    print(f"Error loading model: {e}")
    model = None

# 클래스 레이블 로드
try:
    class_labels_path = Path('config/food_classes.txt')
    with open(class_labels_path, "r") as f:
        classes = [line.strip() for line in f.readlines()]
except Exception as e:
    print(f"Error loading class labels: {e}")
    classes = []

def detect_objects(image):
    if model is None:
        raise RuntimeError("Model not loaded")
    results = model(image)
    detections = []
    for *box, conf, cls in results.xyxy[0].tolist():
        if conf > 0.3:  # 신뢰도 임계값
            class_name = classes[int(cls)]
            detections.append({
                'class': class_name,
                'score': conf
            })
    return detections

@app.route('/detect', methods=['POST'])
def detect():
    if 'image' not in request.files:
        return jsonify({'error': 'No image file provided'}), 400

    file = request.files['image']
    try:
        image = Image.open(io.BytesIO(file.read())).convert("RGB")
    except Exception as e:
        return jsonify({'error': f'Invalid image file: {e}'}), 400

    try:
        detections = detect_objects(image)
    except Exception as e:
        return jsonify({'error': f'Error detecting objects: {e}'}), 500

    if not detections:
        return jsonify({'error': 'No objects detected'}), 400

    class_name = detections[0]['class']

    # MySQL 데이터베이스에 연결하고 class_name을 기준으로 정보 조회
    db_config = {
        'user': 'user_taba',
        'password': '1234',
        'host': '127.0.0.1',
        'database': 'translate',
        'port': '3306'
    }

    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SELECT ename, eng_menu, info, allerge, spicy FROM tb_translator WHERE ename=%s", (class_name,))
        row = cursor.fetchone()
    except mysql.connector.Error as err:
        return jsonify({'error': f'Database error: {err}'}), 500
    finally:
        conn.close()

    if row:
        return jsonify({
            'class': class_name,
            'info': {
                'ename': row[0],
                'eng_menu': row[1],
                'info': row[2],
                'allerge': row[3],
                'spicy': row[4]
            }
        })


    else:
        return jsonify({'error': 'No information found for detected class'}), 404

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)